name: Build and Package

on:
  push:
    branches:
      - main
    paths:
      - 'app/**' # Only trigger if files in the app folder change

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, archlinux-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            package_type: deb
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            package_type: windows
          - os: macos-latest
            target: aarch64-apple-darwin
            package_type: mac
          - os: archlinux-latest
            target: x86_64-unknown-linux-gnu
            package_type: archzst

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install dependencies (Linux - Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev libssl-dev pkg-config

      - name: Install dependencies (Linux - Arch)
        if: matrix.os == 'archlinux-latest'
        run: |
          sudo pacman -Syu --noconfirm
          sudo pacman -S --needed --noconfirm base-devel openssl pkg-config zstd

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install openssl@3 rustup-init pkg-config llvm zstd
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=11.0" >> $GITHUB_ENV
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install wixtoolset -y
          choco install openssl -y
          choco install zstd -y


      - name: Build Rust project (Windows/Linux)
        if: matrix.package_type != 'mac'
        run: |
          cargo build --release --locked --target ${{ matrix.target }}  --manifest-path app/Cargo.toml
        env:
          PKG_CONFIG_ALLOW_CROSS: 1

      - name: Build Rust project (macOS)
        if: matrix.package_type == 'mac'
        run: |
          cargo build --release --locked --target ${{ matrix.target }}  --manifest-path app/Cargo.toml
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}


      - name: Package Debian (.deb)
        if: matrix.package_type == 'deb'
        run: |
          cargo install cargo-deb --force
          cargo deb --target ${{ matrix.target }}  --manifest-path app/Cargo.toml
          mkdir -p artifacts
          mv app/target/${{ matrix.target }}/debian/*.deb artifacts/

        env:
          DEB_BUILD_OPTIONS: nocheck

      - name: Package Arch Linux (.tar.zst)
        if: matrix.package_type == 'archzst'
        run: |
          cargo install cargo-makepkg --force
          cd app
          # Create a basic PKGBUILD
          echo "pkgname='gitswift'" > PKGBUILD
          echo "pkgver=1.0" >> PKGBUILD
          echo "pkgrel=1" >> PKGBUILD
          echo "pkgdesc='A Git-Swift application'" >> PKGBUILD
          echo "arch=('any')" >> PKGBUILD
          echo "license=('MIT')" >> PKGBUILD
          echo "depends=()" >> PKGBUILD
          echo "makedepends=('rust')" >> PKGBUILD
          echo "source=(\"gitswift-$pkgver.tar.gz::$(pwd)/gitswift-$pkgver.tar.gz\")" >> PKGBUILD
          echo "sha256sums=('SKIP')" >> PKGBUILD
          echo "" >> PKGBUILD
          echo "package() {" >> PKGBUILD
          echo "  install -Dm755 \"\$(pwd)/target/${{ matrix.target }}/release/gitswift\" \"\$pkgdir/usr/bin/gitswift\"" >> PKGBUILD
          echo "}" >> PKGBUILD

          # Create a dummy tar.gz for makepkg
          mkdir -p gitswift-1.0
          cp target/${{ matrix.target }}/release/gitswift gitswift-1.0/
          tar -czvf gitswift-1.0.tar.gz gitswift-1.0

          makepkg --nocheck --config "options=(!strip)" --compress zstd

          mkdir -p artifacts
          mv *.zst artifacts/
          cd ..

      - name: Package Windows (.exe/.msi)
        if: matrix.package_type == 'windows'
        run: |
          cargo install cargo-wix --force
          cd app
          cargo wix init
          cargo wix
          cd ..
          mkdir -p artifacts
          mv app/target/wix/*.msi artifacts/
        shell: bash

      - name: Package macOS (.pkg)
        if: matrix.package_type == 'mac'
        run: |
          mkdir -p ~/gitswift-installer/user/local/bin
          mkdir -p artifacts
          cp app/target/${{ matrix.target }}/release/gitswift ~/gitswift-installer/user/local/bin/
          pkgbuild --identifier com.singhropar.gitswift --version 1.0 --install-location / --root ~/gitswift-installer artifacts/gitswift.pkg
        env:
          BUNDLE_ID: com.singhropar.gitswift
          BUNDLE_NAME: gitswift
          MACOSX_DEPLOYMENT_TARGET: 11.0
          OPENSSL_DIR: ${{ env.OPENSSL_DIR }}
          OPENSSL_LIB_DIR: ${{ env.OPENSSL_LIB_DIR }}
          OPENSSL_INCLUDE_DIR: ${{ env.OPENSSL_INCLUDE_DIR }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}


      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.os }}
          path: artifacts/*